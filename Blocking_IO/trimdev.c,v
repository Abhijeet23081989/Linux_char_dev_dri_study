head	1.9;
access;
symbols;
locks
	asrivastava:1.9; strict;
comment	@ * @;


1.9
date	2018.09.21.12.37.57;	author asrivastava;	state Exp;
branches;
next	1.8;

1.8
date	2018.09.21.12.36.52;	author asrivastava;	state Exp;
branches;
next	1.7;

1.7
date	2018.09.21.12.29.31;	author asrivastava;	state Exp;
branches;
next	1.6;

1.6
date	2018.09.20.09.36.43;	author asrivastava;	state Exp;
branches;
next	1.5;

1.5
date	2018.09.20.08.16.45;	author asrivastava;	state Exp;
branches;
next	1.4;

1.4
date	2018.09.15.07.10.17;	author asrivastava;	state Exp;
branches;
next	1.3;

1.3
date	2018.09.02.11.48.20;	author asrivastava;	state Exp;
branches;
next	1.2;

1.2
date	2018.08.30.12.04.55;	author asrivastava;	state Exp;
branches;
next	1.1;

1.1
date	2018.08.30.12.00.10;	author asrivastava;	state Exp;
branches;
next	;


desc
@first iteration
@


1.9
log
@typo
@
text
@#include"headers.h"
#include"declarations.h"
int trimdev(DEV* ldev)
{
	Qset *lqset,*shqset;//lqset=local_qset,shqset=shadow_qset
	int i;
#ifdef DEBUG
	printk(KERN_INFO"Begin: %s\n",__func__);
#endif
	//_______________Checking if Device is present or not______________
	if(!ldev)
	{
#ifdef DEBUG
	printk(KERN_ERR"No Device present\n");
#endif
	goto OUT;
	}
	//___________________Down Semaphore_____________________________
	if(down_interruptible(&ldev->s1))
		return -ERESTARTSYS;
	//_______________Checking if SCULL is present in Device__________
	if(!ldev->first)
	{
#ifdef DEBUG
	printk(KERN_INFO"Nothing to trim\n");
#endif
	goto RET;
	}
	//________________________Deleteing SCULL________________________
	while(ldev->first)
	{
		shqset=lqset=ldev->first;
		while(lqset->next)
		{
			shqset=lqset;
			lqset=lqset->next;
		}
		//_____________For freeing memory of **data_____________
		if(lqset->data)
		{
			//___________For freeing memory of data[i]_____
			for(i=ldev->noofreg-1;i>=0;i--)
			{
				if(lqset->data[i])
				{
					printk(KERN_INFO"i=%d\n",i);
					kfree(lqset->data[i]);
					lqset->data[i]=NULL;
				}
			}
			kfree(lqset->data);
			lqset->data=NULL;
		}
		if(lqset==shqset)
		{
			kfree(shqset);
			ldev->first=NULL;
		}
		else
		{
			kfree(shqset->next);
			shqset->next=NULL;
		}
	}
	up(&ldev->s1);
#ifdef DEBUG
	printk(KERN_INFO"End: %s\n",__func__);
#endif
RET:
	return 0;
OUT:
	return -1;
}
@


1.8
log
@added semaphore after checking if device is present
@
text
@d20 1
a20 1
		return -ERESTARTSYS
@


1.7
log
@removed semaphores
@
text
@d18 3
a20 1

d65 1
a69 1
	up(&ldev->s1);
@


1.6
log
@typo
@
text
@a17 3
	//________________Semaphore Before accessing____________________
	if(down_interruptible(&ldev->s1))
                 return -ERESTARTSYS;
d63 3
a70 3
#ifdef DEBUG
	printk(KERN_INFO"End: %s\n",__func__);
#endif
@


1.5
log
@added semaphore down & up
@
text
@d19 1
a19 1
	if(down_interruptable(&ldev->s1))
@


1.4
log
@*** empty log message ***
@
text
@d18 4
d39 1
d42 1
d67 1
@


1.3
log
@no changes
@
text
@d5 3
a7 1
//#ifdef DEBUG
d9 56
a64 3
//#endif

//#ifdef DEBUG
d66 1
a66 2
//#endif
return 0;
@


1.2
log
@added return 0;
@
text
@d8 1
@


1.1
log
@Initial revision
@
text
@d11 1
@
